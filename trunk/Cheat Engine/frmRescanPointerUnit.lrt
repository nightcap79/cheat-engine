TFRMRESCANPOINTER.CAPTION=Rescan pointerlist
TFRMRESCANPOINTER.CBVALUETYPE.TEXT=4 Byte
TFRMRESCANPOINTER.RBFINDADDRESS.CAPTION=Address to find:
TFRMRESCANPOINTER.RBFINDVALUE.CAPTION=Value to find:
TFRMRESCANPOINTER.CBDELAY.CAPTION=Delay rescan for
TFRMRESCANPOINTER.EDTDELAY.TEXT=0
TFRMRESCANPOINTER.LABEL1.CAPTION=seconds
TFRMRESCANPOINTER.CBBASEPOINTERMUSTBEINRANGE.CAPTION=Base pointer must be in range
TFRMRESCANPOINTER.EDTBASESTART.TEXT=0000000000000000
TFRMRESCANPOINTER.CBMUSTSTARTWITHSPECIFICOFFSETS.CAPTION=Must start with offsets
TFRMRESCANPOINTER.BUTTON2.CAPTION=Cancel
TFRMRESCANPOINTER.BUTTON1.CAPTION=OK
TFRMRESCANPOINTER.EDTBASEEND.TEXT=FFFFFFFFFFFFFFFF
TFRMRESCANPOINTER.LBLAND.CAPTION=and
TFRMRESCANPOINTER.CBMUSTENDWITHSPECIFICOFFSETS.CAPTION=Must end with offsets
TFRMRESCANPOINTER.CBREPEAT.CAPTION=Repeat rescan until stopped
TFRMRESCANPOINTER.CBNOVALUECHECK.CAPTION=Only filter out invalid pointers
TFRMRESCANPOINTER.CBLUAFILTER.HINT=When checked this will call the given function for every pointer being evaluated. Return true if it'svalid, false if not
base is the base address (integer)
offset is a table with offsets
target is the address the pointer points to. Can be nil
TFRMRESCANPOINTER.CBLUAFILTER.CAPTION=Lua filter. function
TFRMRESCANPOINTER.EDTRESCANFUNCTION.TEXT=RescanFilter
TFRMRESCANPOINTER.LBLLUAPARAMS.CAPTION=(base, offsets, target):bool
TFRMRESCANPOINTER.CBDISTRIBUTEDRESCAN.CAPTION=Let other workers rescan as well
TFRMRESCANPOINTER.EDTRESCANPORT.TEXT=52739
